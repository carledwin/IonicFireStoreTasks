{"version":3,"sources":["./src/app/auth/pages/login/login.page.html","./src/app/auth/pages/login/login.module.ts","./src/app/auth/pages/login/login.page.scss","./src/app/auth/pages/login/login.page.ts"],"names":[],"mappings":"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","file":"pages-login-login-module-es2015.js","sourcesContent":["module.exports = \"<ion-content padding>\\n  <ion-grid>\\n    <ion-row justify-content-center>\\n      <ion-col size-xs=\\\"12\\\" size-sm=\\\"8\\\" size-md=\\\"4\\\" size-lg=\\\"3\\\" size-xl=\\\"3\\\">\\n        <h1 text-center>\\n          <ion-icon\\n            name=\\\"done-all\\\"\\n            color=\\\"primary\\\"\\n            class=\\\"icon-7em \\\"\\n          ></ion-icon>\\n        </h1>\\n        <form\\n          [formGroup]=\\\"authForm\\\"\\n          (submit)=\\\"onSubmit(authProviders.Email)\\\"\\n        >\\n      \\n        <ng-container *ngIf=\\\"!configs.isSiginIn\\\">\\n      \\n            <ion-item>\\n                <ion-icon\\n                  name=\\\"person\\\"\\n                  color=\\\"primary\\\"\\n                  slot=\\\"start\\\"\\n                ></ion-icon>\\n                <ion-input\\n                  formControlName=\\\"name\\\"\\n                  type=\\\"text\\\"\\n                  placeholder=\\\"Name\\\"\\n                ></ion-input>\\n                <ion-note\\n                  slot=\\\"end\\\"\\n                  color=\\\"danger\\\"\\n                  *ngIf=\\\"name.dirty && name.hasError('required')\\\"\\n                >\\n                  Required\\n                </ion-note>\\n                <ion-note\\n                  slot=\\\"end\\\"\\n                  color=\\\"danger\\\"\\n                  *ngIf=\\\"name.dirty && name.hasError('minlength')\\\"\\n                >\\n                  Invalid min size(6) name\\n                </ion-note>\\n                <ion-note\\n                  slot=\\\"end\\\"\\n                  color=\\\"danger\\\"\\n                  *ngIf=\\\"name.dirty && name.hasError('maxlength')\\\"\\n                >\\n                  Invalid max size(30) name\\n                </ion-note>\\n              </ion-item>\\n      \\n        </ng-container>\\n          \\n        <ion-item>\\n            <ion-icon\\n              name=\\\"mail\\\"\\n              color=\\\"primary\\\"\\n              slot=\\\"start\\\"\\n            ></ion-icon>\\n            <ion-input\\n              formControlName=\\\"email\\\"\\n              type=\\\"email\\\"\\n              placeholder=\\\"email@email.com\\\"\\n              inputmode=\\\"email\\\"\\n              autofocus=\\\"true\\\"\\n            ></ion-input>\\n            <ion-note\\n              slot=\\\"end\\\"\\n              color=\\\"danger\\\"\\n              *ngIf=\\\"email.dirty && email.hasError('required')\\\"\\n            >\\n              Required\\n            </ion-note>\\n            <ion-note\\n              slot=\\\"end\\\"\\n              color=\\\"danger\\\"\\n              *ngIf=\\\"email.dirty && email.hasError('email')\\\"\\n            >\\n              Invalid email\\n            </ion-note>\\n          </ion-item>\\n      \\n          <ion-item>\\n            <ion-icon\\n              name=\\\"lock\\\"\\n              color=\\\"primary\\\"\\n              slot=\\\"start\\\"\\n            ></ion-icon>\\n            <ion-input\\n              formControlName=\\\"password\\\"\\n              type=\\\"password\\\"\\n              placeholder=\\\"re@sdsd12A\\\"\\n            ></ion-input>\\n            <ion-note\\n              slot=\\\"end\\\"\\n              color=\\\"danger\\\"\\n              *ngIf=\\\"password.dirty && password.hasError('required')\\\"\\n            >\\n              Required\\n            </ion-note>\\n            <ion-note\\n              slot=\\\"end\\\"\\n              color=\\\"danger\\\"\\n              *ngIf=\\\"password.dirty && password.hasError('minlength')\\\"\\n            >\\n              Invalid min size(6) password\\n            </ion-note>\\n            <ion-note\\n              slot=\\\"end\\\"\\n              color=\\\"danger\\\"\\n              *ngIf=\\\"password.dirty && password.hasError('maxlength')\\\"\\n            >\\n              Invalid max size(10) password\\n            </ion-note>\\n          </ion-item>\\n      \\n          <ion-button\\n            expand=\\\"block\\\"\\n            type=\\\"submit\\\"\\n            [disabled]=\\\"authForm.invalid\\\"\\n          >\\n            {{ configs.action }}\\n          </ion-button>\\n        </form>\\n      \\n        <ion-button\\n          expand=\\\"block\\\"\\n          fill=\\\"clear\\\"\\n          (click)=\\\"changeAuthAction()\\\"\\n        >\\n          {{ configs.actionChange }}\\n        </ion-button>\\n        <ion-button expand=\\\"full\\\" (click)=\\\"onSubmit(authProviders.Facebook)\\\">\\n          <ion-icon\\n            name=\\\"logo-facebook\\\"\\n            slot=\\\"start\\\"\\n          ></ion-icon>\\n          Login with Facebook\\n        </ion-button>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild(routes)],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcGFnZXMvbG9naW4vbG9naW4ucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { NavController } from '@ionic/angular';\nimport { AuthService } from './../../../core/services/auth.service';\nimport { AuthProvider } from './../../../core/services/auth.types';\nimport { OverlayService } from './../../../core/services/overlay.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss']\n})\nexport class LoginPage implements OnInit {\n  \n  authForm: FormGroup;\n\n  authProviders = AuthProvider;\n\n  configs = { isSiginIn: true, action: 'Login', actionChange: 'Create account' };\n\n  private nameControl = new FormControl(' ', [Validators.required, Validators.minLength(3)]);\n\n  constructor(private authService: AuthService, \n              private navCtrl: NavController,\n              private activatedRoute: ActivatedRoute,\n              private formBuilder: FormBuilder,\n              private overlayService: OverlayService) {}\n\n  ngOnInit(): void {\n    this.createForm();\n  }\n\n  createForm(): void {\n    this.authForm = this.formBuilder.group({\n      email: [' ', [Validators.required, Validators.email]],\n      password: [' ', [Validators.required, Validators.minLength(6), Validators.maxLength(10)]],\n      //name: [' ', [Validators.required, Validators.minLength(3), Validators.maxLength(30)]]\n    });\n  }\n\n  get name(): FormControl {\n    return <FormControl>this.authForm.get('name');\n  }\n\n  get email(): FormControl {\n    return <FormControl>this.authForm.get('email');\n  }\n\n  get password(): FormControl {\n    return <FormControl>this.authForm.get('password');\n  }\n\n  async onSubmit(provider: AuthProvider): Promise<void> {\n    \n    const loading = await this.overlayService.loading();\n\n    try{\n\n      const credentials = await this.authService.orchestrator({\n        \n        isSignIn: this.configs.isSiginIn,\n        user: this.authForm.value,\n        provider\n      });\n\n      console.log('AuthForm: ', this.authForm.value);\n\n      console.log('Redirecting....');\n\n      this.navCtrl.navigateForward(this.activatedRoute.snapshot.queryParamMap.get('redirect') || '/tasks');\n\n    }catch(error){\n      \n      console.error('Auth error: ', error);\n\n      await this.overlayService.toast({\n        message: error.message\n      });\n\n    }finally{\n\n      loading.dismiss();\n    }\n\n  }\n\n  changeAuthAction(): void {\n\n    this.configs.isSiginIn = !this.configs.isSiginIn;\n    \n    const { isSiginIn } = this.configs;\n    \n    this.configs.action = isSiginIn ? 'Login' : 'Sign Up';\n    \n    this.configs.actionChange = isSiginIn ? 'Create account' : 'Already have an account';\n\n    !isSiginIn\n      ? this.authForm.addControl('name', this.nameControl)\n      : this.authForm.removeControl('name');\n  }\n}\n"],"sourceRoot":""}