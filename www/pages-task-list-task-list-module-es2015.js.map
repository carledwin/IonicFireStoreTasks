{"version":3,"sources":["./src/app/tasks/components/task-item/task-item.component.html","./src/app/tasks/pages/task-list/task-list.page.html","./src/app/tasks/components/components.module.ts","./src/app/tasks/components/task-item/task-item.component.scss","./src/app/tasks/components/task-item/task-item.component.ts","./src/app/tasks/pages/task-list/task-list.module.ts","./src/app/tasks/pages/task-list/task-list.page.scss","./src/app/tasks/pages/task-list/task-list.page.ts"],"names":[],"mappings":"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","file":"pages-task-list-task-list-module-es2015.js","sourcesContent":["module.exports = \" <ion-item-sliding #sliding>\\n   <ion-item (click)=\\\"updateEventEmitter.emit(task)\\\">\\n     {{ task.title }}\\n    <ion-toggle slot=\\\"end\\\" \\n                color=\\\"primary\\\" \\n                [checked]=\\\"task.done\\\" \\n                (ionChange)=\\\"doneEventEmitter.emit(task)\\\"\\n                (click)=\\\"$event.stopPropagation()\\\"></ion-toggle>\\n   </ion-item>\\n\\n   <ion-item-options side=\\\"start\\\">\\n     <ion-item-option color=\\\"danger\\\" (click)=\\\"deleteEventEmitter.emit(task); sliding.close()\\\">\\n       <ion-icon slot=\\\"icon-only\\\" name=\\\"trash\\\"></ion-icon>\\n     </ion-item-option>\\n     <ion-item-option color=\\\"primary\\\" (click)=\\\"updateEventEmitter.emit(task); sliding.close()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"create\\\"></ion-icon>\\n      </ion-item-option>\\n   </ion-item-options>\\n </ion-item-sliding>\"","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    \\n    <app-menu-toggle slot=\\\"start\\\" menu=\\\"main-menu-id\\\"></app-menu-toggle>\\n    <ion-title>Task List</ion-title>\\n    <app-logout-button slot=\\\"end\\\" menu=\\\"main-menu-id\\\"></app-logout-button>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n\\n  <ion-list *ngIf=\\\"(tasks$ | async) as tasks\\\">\\n    <ng-container *ngIf=\\\"tasks.length > 0; else noTasks\\\">\\n      <app-task-item *ngFor=\\\"let task of tasks\\\" [task]=\\\"task\\\" \\n      (updateEventEmitter)=\\\"onUpdate($event)\\\"\\n      (deleteEventEmitter)=\\\"onDelete($event)\\\"\\n      (doneEventEmitter)=\\\"onDone($event)\\\"></app-task-item>\\n    </ng-container>\\n    <ng-template #noTasks>\\n      <ion-item lines=\\\"none\\\">\\n        No Tasks yet ....\\n      </ion-item>\\n    </ng-template>\\n  </ion-list>\\n\\n  <ion-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" slot=\\\"fixed\\\">\\n    <ion-fab-button routerLink=\\\"create\\\" routerDirection=\\\"forward\\\">\\n      <ion-icon name=\\\"add\\\"></ion-icon>\\n    </ion-fab-button>\\n  </ion-fab>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { TaskItemComponent } from './task-item/task-item.component';\n\n@NgModule({\n  declarations: [TaskItemComponent],\n  imports: [\n    SharedModule\n  ],\n  exports: [\n    TaskItemComponent\n  ]\n})\nexport class ComponentsModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Rhc2tzL2NvbXBvbmVudHMvdGFzay1pdGVtL3Rhc2staXRlbS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Task } from '../../models/task.model';\n\n@Component({\n  selector: 'app-task-item',\n  templateUrl: './task-item.component.html',\n  styleUrls: ['./task-item.component.scss'],\n})\nexport class TaskItemComponent {\n\n  //<app-task-item [task]=\"task\" property bind (doneEventEmitter)=\"onDone($event)\"\n  @Input() task: Task;\n\n  //eventos que podem ser emitidos pelo component para concluir a task\n  @Output() doneEventEmitter = new EventEmitter<Task>();\n  @Output() updateEventEmitter = new EventEmitter<Task>();\n  @Output() deleteEventEmitter = new EventEmitter<Task>();\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ComponentsModule } from './../../components/components.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { TaskListPage } from './task-list.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TaskListPage\n  }\n];\n\n@NgModule({\n  imports: [\n    SharedModule,\n    ComponentsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [TaskListPage]\n})\nexport class TaskListPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Rhc2tzL3BhZ2VzL3Rhc2stbGlzdC90YXNrLWxpc3QucGFnZS5zY3NzIn0= */\"","import { OverlayService } from './../../../core/services/overlay.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Task } from '../../models/task.model';\nimport { NavController } from '@ionic/angular';\nimport { TasksService } from './../../services/tasks.service';\nimport { take } from 'rxjs/operators';\nimport { loadingController } from '@ionic/core';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.page.html',\n  styleUrls: ['./task-list.page.scss'],\n})\nexport class TaskListPage {\n\n  tasks$: Observable<Task[]>;\n\n  constructor(private tasksService: TasksService,\n    private overlayService: OverlayService,\n    private navCtrl: NavController) { }\n\n  async ionViewDidEnter(): Promise<void> {\n  \n    const loading = await this.overlayService.loading();\n\n    this.tasks$ = this.tasksService.getAll();\n    \n    console.log('Tasks... >>> ', this.tasks$);\n    \n    this.tasks$.pipe(take(1)).subscribe(tasks => loading.dismiss());\n  }\n\n  onUpdate(task: Task): void {\n\n    console.log('preparando para editar ....');\n    this.navCtrl.navigateForward(`/tasks/edit/${task.id}`);\n    // ou this.navCtrl.navigateForward(['tasks', 'edit', task.id]);\n  }\n\n  async onDelete(task: Task): Promise<void> {\n\n    console.log('preparando para excluir ....');\n\n    await this.overlayService.alert({\n      message: `Do you really want to delete the task \"${task.title}\"?`,\n    buttons: [\n      {\n        text: 'Yes',\n        handler: async () => {\n\n          await this.tasksService.delete(task);\n\n          await this.overlayService.toast({\n\n            message: `Task \"${task.title}\" deleted!`\n          });\n        }\n      },\n      'No'\n    ]\n  });\n  }\n\n  async onDone(task: Task): Promise<void>{\n\n    const taskToUpdate = {... task, done: !task.done};\n\n    await this.tasksService.update(taskToUpdate);\n\n    await this.overlayService.toast({\n      message: `Task \"${task.title}\" ${taskToUpdate.done ? 'completed' : 'updated'}!`\n    });\n  }\n\n}\n"],"sourceRoot":""}